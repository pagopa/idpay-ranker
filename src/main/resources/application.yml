mongo:
  request-rate-too-large:
    api:
      enabled: ${MONGO_REQUEST_RATE_TOO_LARGE_API_ENABLED:false}
      max-retry: ${MONGO_REQUEST_RATE_TOO_LARGE_API_MAX_RETRY:0}
      max-millis-elapsed: ${MONGO_REQUEST_RATE_TOO_LARGE_API_MAX_MILLIS_ELAPSED:200}
    batch:
      enabled: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_ENABLED:true}
      max-retry: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_MAX_RETRY:5}
      max-millis-elapsed: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_MAX_MILLIS_ELAPSED:0}

server:
  port: ${RANKER_PORT:8080}

reactor:
  bufferSize:
    small: ${REACTOR_BUFFER_SIZE:256}

springdoc.swagger-ui.path: "/swagger-ui/index.html"

spring:
  application:
    name: "@project.artifactId@"
    version: "@project.version@"
  jmx.enabled: true
  config:
    activate:
      on-profile: default
  cloud:
    azure:
      servicebus:
        connection-string: ${SERVICEBUS_ONBOARDING_CONNECTION_STRING:}
    function:
      definition: rankerProcessor;rankerProcessorOut;
    stream:
      bindings:
        rankerProcessor-in-0:
          destination: ${KAFKA_ONBOARDING_REQUEST_TOPIC:idpay-onboarding-request}
          binder: kafka-onboarding-request
          consumer.autoStartup: false
        rankerProcessorOut-out-0:
          destination: ${KAFKA_ONBOARDING_OUTCOME_TOPIC:idpay-newqueue-outcome}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-onboarding-outcome
      servicebus:
        bindings:
          rankerProcessor-in-0:
            consumer:
              auto-complete: false
      binders:
        kafka-onboarding-request:
          type: servicebus
        kafka-onboarding-outcome:
          type: servicebus
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017}
      database: ${MONGODB_DBNAME:idpay}
      # custom configured properties
      config:
        connectionPool:
          maxSize: ${MONGODB_CONNECTIONPOOL_MAX_SIZE:100}
          minSize: ${MONGODB_CONNECTIONPOOL_MIN_SIZE:0}
          maxWaitTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_WAIT_MS:120000}
          maxConnectionLifeTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_LIFE_MS:0}
          maxConnectionIdleTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_IDLE_MS:120000}
          maxConnecting: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTING:2}

management:
  health:
    mongo.enabled: ${HEALTH_MONGO_ENABLED:true}
  endpoint:
    health:
      probes.enabled: true
      group:
        readiness.include: "*"
        liveness.include: livenessState,diskSpace,ping,binders,streams
      logging.slow-indicator-threshold: ${HEALTH_ACTUATOR_LOGGER_TIMEOUT_DURATION:PT1S}
  endpoints:
    jmx:
      exposure.include: "*"
    web:
      exposure.include: info, health

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    it.gov.pagopa: ${LOG_LEVEL_PAGOPA:INFO}
    it.gov.pagopa.common.reactive.kafka.consumer: ${LOG_LEVEL_BASE_KAFKA_CONSUMER:INFO}
    it.gov.pagopa.ranker: ${LOG_LEVEL_RANKER:INFO}
    org.springframework.integration: ${LOG_LEVEL_SPRING_INTEGRATION:INFO}
    org.springframework.security: ${LOG_LEVEL_SPRING_SECURITY:INFO}
    org.springframework.ws: ${LOG_LEVEL_SPRING_WS:INFO}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
    org.springframework.data: ${LOG_LEVEL_SPRING_DATA:INFO}
    org.springframework.hateoas: ${LOG_LEVEL_SPRING_HATEOAS:INFO}
    org.springframework.boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
    org.springframework.boot.availability: ${LOG_LEVEL_SPRING_BOOT_AVAILABILITY:DEBUG}
    org.springframework.kafka: ${LOG_LEVEL_SPRING_KAFKA:INFO}
    org.springframework.batch: ${LOG_LEVEL_SPRING_BATCH:INFO}
    io.swagger: ${LOG_LEVEL_IO_SWAGGER:WARN}
    javax.persistence: ${LOG_LEVEL_JAVAX_PERSISTENCE:INFO}
    org.hibernate: ${LOG_LEVEL_ORG_HIBERNATE:INFO}
    org.kie: ${LOG_LEVEL_ORG_KIE:WARN}
    org.drools: ${LOG_LEVEL_ORG_DROOLS:WARN}
    org.drools.mvel.MVELConstraint: ${LOG_LEVEL_ORG_DROOLS_COMPILE:ERROR}
    org.mongodb.driver: ${LOG_LEVEL_MONGODB_DRIVER:WARN}

app:
  threads:
    # the size of the thread pool to handle @Scheduled tasks
    schedule-max-number: ${THREADS_SCHEDULE_MAX_NUMBER:1}
  onboarding-request:
    max-retry: ${ONBOARDING_REQUEST_ERROR_MAX_RETRY:3}
    delay-message:
      next-day: ${ONBOARDING_REQUEST_DELAY_NEXT_DAY:false}
      delay-minutes: ${ONBOARDING_REQUEST_DELAY_MINUTES:60}
    delay-family-in-progress:
      delay-minutes: ${ONBOARDING_FAMILY_REQUEST_IN_PROGRESS_DELAY_MINUTES:5}
  web-client:
    connect.timeout.millis: ${CONNECT_TIMEOUT_MILLIS:10000}
    response.timeout: ${RESPONSE_TIMEOUT:60000}
    read.handler.timeout: ${READ_TIMEOUT_HANDLER:60000}
    write.handler.timeout: ${WRITE_TIMEOUT_HANDLER:60000}